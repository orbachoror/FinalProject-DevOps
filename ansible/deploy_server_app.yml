---
- name: Provision and deploy app server
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - group_vars/env.yaml
  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ network }}"
        region: "{{ zone }}"
        state: present
        dns_hostnames: yes
        dns_support: yes
        tags:
          Name: "{{ vpc_name }}"
      register: vpc

    - name: Create Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_public }}"
        region: "{{ zone }}"
        az: "{{ subnet1 }}"
        map_public: yes
        state: present
        tags:
          Name: "{{ vpc_name }}-subnet"
        wait: yes
      register: subnet

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ zone }}"
        state: present
        tags:
          Name: "{{ vpc_name }}-igw"
      register: igw

    - name: Create Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ zone }}"
        state: present
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ vpc_name }}-public-rt"

    - name: Create Security Group
      amazon.aws.ec2_group:
        name: "{{ vpc_name }}-sg"
        description: "Allow HTTP and SSH"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ zone }}"
        state: present
        rules:
          - proto: tcp
            ports:
              - 22
              - 80
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        name: "{{ server_name }}"
        key_name: "{{ keypair }}"
        image_id: "{{ aws_ubuntu_ami }}"
        instance_type: "{{ Server_type }}"
        region: "{{ zone }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_group: "{{ sg.group_id }}"
        wait: yes
        network:
          assign_public_ip: yes
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: "{{ server_volume_size }}"
              volume_type: gp3
              delete_on_termination: true
        tags:
          Environment: "{{ env }}"
        state: running
        wait_timeout: 500
      register: ec2_data

    - name: Wait for SSH to be ready
      wait_for:
        host: "{{ ec2_data.instances[0].public_ip_address }}"
        port: 22
        timeout: 300

    - name: Add server to dynamic inventory
      add_host:
        name: "{{ ec2_data.instances[0].public_ip_address }}"
        groups: app


- name: Configure and deploy app
  hosts: app
  user: ubuntu
  become: yes
  gather_facts: false
  vars_files:
    - group_vars/env.yaml
    - group_vars/docker.env

  tasks:
    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu jammy stable"
        state: present
        filename: docker

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: latest
        update_cache: yes

    - name: Enable Docker
      service:
        name: docker
        state: started
        enabled: yes

    - name: Copy private key for Git
      copy:
        src: ~/.ssh/id_rsa
        dest: /home/ubuntu/.ssh/id_rsa
        mode: '0600'
        owner: ubuntu
        group: ubuntu

    - name: Clone app from GitHub
      git:
        repo: git@github.com:OptimaLPro/FinalProject-DevOps.git
        dest: /opt/app
        version: main
        key_file: /home/ubuntu/.ssh/id_rsa
        accept_hostkey: yes
        force: yes

    - name: Build and push Docker image
      shell: "{{ item }}"
      args:
        chdir: /opt/app
      with_items:
        - docker login -u {{ docker_user }} -p {{ docker_token }}
        - docker build -t {{ docker_user }}/final-devops-app:latest .
        - docker push {{ docker_user }}/final-devops-app:latest

    - name: Run Docker app
      shell: docker compose up -d
      args:
        chdir: /opt/app

    - name: Show public IP
      debug:
        msg: "App deployed! Access it at http://{{ ansible_host }}"